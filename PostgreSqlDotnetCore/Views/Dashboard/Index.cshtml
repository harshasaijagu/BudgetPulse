@using System.Globalization
@model PostgreSqlDotnetCore.Models.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
}
<header>
    <div id="navbar1" class="navbar top">
        <h1 class="logo">
            <span class="text-primary"><i class="fas fa-book-open"></i> Budget</span>Pulse
        </h1>
        <nav>
            <ul>
                <li><a href="@Url.Action("Index", "Dashboard")">Dashboard</a></li>
                <li><a href="@Url.Action("Index", "Expense")">Expenses</a></li>
                @*<li><a href="@Url.Action("Index", "About")">About</a></li>*@
                @if (TempData != null)
                {

                    <li><a href="@Url.Action("Logout", "Home")">Logout</a></li>
                }
                else
                {
                    <li><a href="@Url.Action("Login", "Home")">Login</a></li>
                }

            </ul>
        </nav>
    </div>
</header>


<div class="dashboard">
    <h2>Welcome, @Model.UserName! Your Dashboard</h2>

    <div class="dashboard-content">
        <div class="budget-input">
            <h3>Set Your  @Model.CurrentMonth Month Budget</h3>
            <form asp-action="SetBudget" method="post">
                <input type="number" asp-for="MonthlyBudget" id="monthly-budget-input" placeholder="Enter your monthly budget" />
                <button type="submit" id="set-budget-button">Set Budget</button>
            </form>
            <div class="card">
                <h3>Monthly Budget</h3>
                <p id="monthly-budget">@($"${Model.MonthlyBudget}")</p>
            </div>
            <div class="card">
                <h3>Expenses This Month</h3>
                <p id="monthly-expenses">@($"${Model.MonthlyExpenses}")</p>
            </div>
            <div class="card">
                <h3>Remaining Budget</h3>
                <p id="remaining-budget">@($"${Model.RemainingBudget}")</p>
            </div>
        </div>
        <div class="expense-chart">
            <h3>Expense Breakdown for @Model.CurrentMonth month</h3>
            <canvas id="expenseChart"></canvas>
        </div>
    </div>


    <div class="dashboard-content">
        <div class="budget-input">

            <div class="card">
                <h3>Total Expenses </h3>
                <p id="monthly-budget">@($"${Model.TotalExpenses}")</p>
            </div>
            <div class="card">
                <h3>Total Budget </h3>
                <p id="monthly-budget">@($"${Model.TotalBudget}")</p>
            </div>

        </div>
        <div class="expense-chart">
            <h3>Total Expenses Breakdown</h3>
            <canvas id="TotalExpenseChart"></canvas>
        </div>

    </div>
    <div class="dashboard-content">
        <div class="budget-input">

            <div class="card">
                <h3>Total Savings from the past 12 months</h3>
                <p id="monthly-budget">@($"${Model.Profit}")</p>
            </div>
            <div class="card">
                <h3>Expected Expenes in next month</h3>
                <p id="monthly-budget">@($"${Model.NextMonthExpensesForecast}")</p>
            </div>
        </div>
        <div class="expense-chart">
            <h3>Budget vs Expenses for the Past 12 Months</h3>
            <canvas id="budgetExpenseChart"></canvas>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>

        // Initialize the expense chart
        const ctx = document.getElementById('expenseChart').getContext('2d');
        const expenseChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.ExpenseData.Keys)),
                datasets: [{

                    data: @Html.Raw(Json.Serialize(Model.ExpenseData.Values)),
                    backgroundColor: ['#4CAF50', '#2196F3', '#FF9800', '#E91E63','#800080']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });
         // Initialize the total expense chart
        const ctx_1 = document.getElementById('TotalExpenseChart').getContext('2d');
        const TotalExpenseChart = new Chart(ctx_1, {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.TotalExpenseData.Keys)),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.TotalExpenseData.Values)),
                    backgroundColor: ['#4CAF50', '#2196F3', '#FF9800', '#E91E63', '#800080']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            generateLabels: (chart) => {
                                const data = chart.data;
                                if (data.labels && data.datasets.length) {
                                    const total = data.datasets[0].data.reduce((a, b) => a + b, 0);
                                    return data.labels.map((label, i) => ({
                                        text: `${label} (${((data.datasets[0].data[i] / total) * 100).toFixed(2)}%)`,
                                        fillStyle: data.datasets[0].backgroundColor[i]
                                    }));
                                }
                                return [];
                            }
                        }
                    }
                }
            }
        });
</script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Initialize the budget vs expenses chart
const ctx1 = document.getElementById('budgetExpenseChart').getContext('2d');
const budgetExpenseChart = new Chart(ctx1, {
    type: 'bar',
    data: {
        labels: @Html.Raw(Json.Serialize(Enumerable.Range(-11, 12).Select(i =>
            new DateTimeFormatInfo().GetMonthName(DateTime.Now.AddMonths(i).Month) + " " + DateTime.Now.AddMonths(i).Year))),
        datasets: [
            {
                type: 'line',
                label: 'Budget',
                data: @Html.Raw(Json.Serialize(Enumerable.Range(-11, 12).Select(i =>
                {
                    var budget = Model.MonthlyBudgets_12.Where(b => b.month == DateTime.Now.AddMonths(i).Month && b.year == DateTime.Now.AddMonths(i).Year)
                        .OrderByDescending(b => b.year)
                        .Select(b => b.amount)
                        .FirstOrDefault();
                    return budget > 0 ? budget : 0;
                }))),
                borderColor: 'blue',
                yAxisID: 'budget-axis'
            },
            {
                type: 'line',
                label: 'Expenses',
                data: @Html.Raw(Json.Serialize(Enumerable.Range(-11, 12).Select(i =>
                {
                    var expenses = Model.MonthlyExpenses_12.GetValueOrDefault<(int, int), decimal>((DateTime.Now.AddMonths(i).Month, DateTime.Now.AddMonths(i).Year), 0);
                    return expenses;
                }))),
                borderColor: 'red',
                yAxisID: 'budget-axis'
            },
            {
                type: 'bar',
                label: 'Profit/Loss',
                data: @Html.Raw(Json.Serialize(Enumerable.Range(-11, 12).Select(i =>
                {
                    var budget = Model.MonthlyBudgets_12.Where(b => b.month == DateTime.Now.AddMonths(i).Month && b.year == DateTime.Now.AddMonths(i).Year)
                        .OrderByDescending(b => b.year)
                        .Select(b => b.amount)
                        .FirstOrDefault();
                    var expenses = Model.MonthlyExpenses_12.GetValueOrDefault<(int, int), decimal>((DateTime.Now.AddMonths(i).Month, DateTime.Now.AddMonths(i).Year), 0);
                    return budget > 0 ? budget - expenses : 0;
                }))),
                backgroundColor: '#28a745',
                yAxisID: 'profit-axis'
            }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            'budget-axis': {
                type: 'linear',
                position: 'left',
                title: {
                    display: true,
                    text: 'Budget and Expenses'
                }
            },
            'profit-axis': {
                type: 'linear',
                position: 'right',
                title: {
                    display: true,
                    text: 'Profit/Loss'
                }
            }
        }
    }
});
</script>



<script src="https://code.jquery.com/jquery-3.5.0.min.js"
        integrity="sha256-xNzN2a4ltkB44Mc/Jz3pT4iU1cmeR0FkXs4pru/JxaQ="
        crossorigin="anonymous"></script>
<script src="js/site.js"></script>
<script>const navbar = document.getElementById('navbar1');

    window.addEventListener('scroll', function () {
        if (window.pageYOffset > 100) {
            navbar.classList.add('show');
        } else {
            navbar.classList.remove('show');
        }
    });</script>



